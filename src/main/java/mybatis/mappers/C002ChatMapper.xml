<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.chat">
	<resultMap id="classFriend" type="java.util.HashMap">
		<result property="memNum" column="memNum" />
        <result property="memName" column="memName" />
        <result property="openclassId" column="openclassId" />
        <result property="openclassName" column="openclassName" />
    </resultMap> 
    
    <resultMap id="memInfo" type="java.util.HashMap">
    	<result property="memNum" column="memNum"/>
    	<result property="memName" column="memName"/>
    </resultMap>
    
    <resultMap id="chatroomInfo" type="java.util.HashMap">
    	<result property="chatroomId" column="chatroomId"/>
    	<result property="chatroomName" column="chatroomName"/>
    	<result property="memNum" column="memNum"/>
    	<result property="memName" column="memName"/>
    </resultMap>
    
     <resultMap id="chatMsg" type="java.util.HashMap">
     	<result property="send_memNum" column="memNum"/>
    	<result property="send_name" column="memId"/>
    	<result property="send_time" column="msgDatetime"/>
    	<result property="send_msg" column="msgText"/>
    </resultMap>
    
    <!-- 채팅방 목록 가져오기 -->
    <select id="getChatroomList" resultType="C002ChatroomVO" parameterType="java.util.HashMap">
    	<![CDATA[
		    SELECT A.CHATROOMNICKNAME CHATROOMNAME, B.CHATROOMID
			FROM MEMBERCHAT A, CHATROOM B
			WHERE A.CHATROOMID=B.CHATROOMID
			    AND A.MEMNUM = #{memNum, jdbcType=VARCHAR}
			ORDER BY TO_NUMBER(B.CHATROOMID)
		]]>
    </select>
    
    <!-- 학생일 경우 -->
	<!-- 내가 신청한 수업 목록 가져오기 -->
	<select id="getMyClassList" resultType="String" parameterType="java.util.HashMap" >
		<![CDATA[
			SELECT openClassId
			FROM ENROLMENT
			WHERE classApplyCode = '1600'
		]]>
		<if test=" memNum != ''  and  memNum != null">
		<![CDATA[
			memNum = #{memNum,jdbcType=VARCHAR}
		]]>
		</if>
	</select>
	
	<!-- 친구 목록 불러오기 // 같은 수업을 듣는 학생 -->
	<select id="getclassFriendList" resultMap="classFriend" parameterType="java.util.HashMap">
		<![CDATA[
			SELECT M.memNum, M.memName, E.openclassId, E.openclassName
			FROM ENROLMENT E, MEMBER M
		]]>
		<where>
			<![CDATA[
				E.MEMNUM = M.MEMNUM
				AND E.classApplyCode = '1600'
			]]>
			<if test=" memNum != ''  and  memNum != null">
			<![CDATA[
				and M.memNum <> #{memNum, jdbcType=VARCHAR}
			]]>
			</if>
			<choose>
	            <when test="classList.size != 0">
	                and E.openClassId in 
	                <foreach collection="classList" item="item" index="index" separator="," open="(" close=")">
	                    #{item}
	                </foreach>
	            </when>
        	</choose>
		</where>
		<![CDATA[
			ORDER BY TO_NUMBER(E.openclassId), TO_NUMBER(M.memNum)
		]]>
	</select>
	
	<!-- 내가 듣는 수업의 강사 목록 가져오기 -->
	<select id="getTeaList" resultMap="classFriend" parameterType="java.util.HashMap">
		<![CDATA[
			SELECT UNIQUE m.memNum, m.memName, '0' openclassId, '강사' openclassName
			FROM OPENCLASS O, MEMBER M
		]]>
		<where>
			<![CDATA[
				O.memNum = m.memNum
			]]>
			<choose>
	            <when test="classList.size != 0">
	                and O.OPENCLASSID in 
	                <foreach collection="classList" item="item" index="index" separator="," open="(" close=")">
	                    #{item}
	                </foreach>
	            </when>
        	</choose>
		</where>
		<![CDATA[
			ORDER BY TO_NUMBER(M.memNum)
		]]>
	</select>
	
	<!-- 강사일 경우 -->
	<!-- 담당한 수업 목록 가져오기  -->
	<select id="getTeaClassList" resultType="String" parameterType="java.util.HashMap" >
		<![CDATA[
			SELECT openClassId
			FROM OPENCLASS
		]]>
		<where>
			<if test=" memNum != ''  and  memNum != null">
			<![CDATA[
				memNum = #{memNum}
			]]>
			</if>
		</where>
	</select>
	
	<!-- 본인 수업을 듣는 학생 리스트 가져오기  -->
	<select id="getclassStuList" resultMap="classFriend" parameterType="java.util.HashMap">
		<![CDATA[
			SELECT M.memNum, M.memName, E.openclassId, E.openclassName
			FROM ENROLMENT E, MEMBER M
		]]>
		<where>
			<![CDATA[
				E.MEMNUM = M.MEMNUM
				AND E.classApplyCode = '1600'
			]]>
			<choose>
	            <when test="classList.size != 0">
	                and openClassId in 
	                <foreach collection="classList" item="item" index="index" separator="," open="(" close=")">
	                    #{item}
	                </foreach>
	            </when>
        	</choose>
		</where>
		<![CDATA[
			ORDER BY TO_NUMBER(E.openclassId), TO_NUMBER(M.memNum)
		]]>
	</select>

	<!-- 채팅방에 추가할 멤버 정보 가져오기 -->
	<select id="getmemInfo" resultMap="memInfo" parameterType="java.util.HashMap">
		<![CDATA[
			SELECT memNum, memName
			FROM MEMBER
		]]>
		<where>
			<choose>
	            <when test="memList.size != 0">
	                memNum in 
	                <foreach collection="memList" item="item" index="index" separator="," open="(" close=")">
	                    #{item}
	                </foreach>
	            </when>
        	</choose>
		</where>
		<![CDATA[
			ORDER BY TO_NUMBER(memNum)
		]]>
	</select>
	
	<!-- 생성할 채팅방 번호 만들어 가져오기 / 시퀀스 사용 -->
	<select id="getchatroomId" resultType="String">
		<![CDATA[
			SELECT SEQ_CHATROOM.NEXTVAL FROM DUAL
		]]>
	</select>
	
	<!-- 채팅방 만들기 -->
	<insert id="insertChatroom" parameterType="java.util.HashMap"> 
		<![CDATA[
			INSERT INTO CHATROOM(chatroomId,chatroomName,memNum)
			    VALUES( #{chatroomId,jdbcType=VARCHAR}, 
			    		#{chatroomName,jdbcType=VARCHAR},
			    		#{makeMember,jdbcType=VARCHAR}
			    	)
		]]>
	</insert>
	
	<!-- 생성한 채팅방 멤버 추가하기 -->
	<insert id="insertMemberChat" parameterType="java.util.HashMap">
		<foreach collection="memList" item="item" open="INSERT ALL" close=" SELECT * FROM DUAL" separator=" "> 
			INTO MEMBERCHAT (memNum,chatroomId,chatroomNickname) VALUES (#{item}, #{chatroomId}, #{chatroomName}) 
		</foreach>
	</insert>
	
	
	<!-- 방장 번호 알아오기 -->
	<select id="getmakeMember" resultType="String" parameterType="java.util.HashMap">
		<![CDATA[
			SELECT memNum
			FROM CHATROOM
		]]>
		<where>
			<if test=" chatroomId != ''  and  chatroomId != null">
			<![CDATA[
				CHATROOMID=#{chatroomId}
			]]>
			</if>
		</where>
	</select>
	
	<!-- 방이름, 방번호, 참여멤버 이름 가져오기 -->
	<select id="getChatroomInfo" resultMap="chatroomInfo" parameterType="java.util.HashMap">
		<![CDATA[
			SELECT A.CHATROOMID, B.chatroomNickname CHATROOMNAME,C.MEMNUM, C.MEMNAME
			FROM CHATROOM A, MEMBERCHAT B, MEMBER C
		]]>
		<where>
			<![CDATA[
				A.CHATROOMID=B.CHATROOMID
	    		AND B.MEMNUM=C.MEMNUM
			]]>
			<if test=" chatroomId != ''  and  chatroomId != null">
				<![CDATA[
					AND A.CHATROOMID=#{chatroomId}
				]]>
			</if>
		</where>
	</select>
	
	<!--접속 할 나의 모든 채팅방 리스트 가져오기  -->
	<select id="getmychatIdList" resultType="String" parameterType="String">
		<![CDATA[
			SELECT CHATROOMID
			FROM MEMBERCHAT
		]]>
		<where>
			<if test=" value != ''  and  value != null">
				<![CDATA[
					memNum=#{value}
				]]>
			</if>
		</where>
	</select>
	
	<!-- 채팅 메시지 저장하기 -->
	<insert id="insertMsg" parameterType="java.util.HashMap">
		<![CDATA[
			INSERT INTO MESSAGE(msgNum,chatroomId,memNum,msgDatetime,msgText)
			    VALUES( 
			    		SEQ_MESSAGE.NEXTVAL,
			    		#{send_target,jdbcType=VARCHAR},
			    		#{send_memNum,jdbcType=VARCHAR}, 
			    		#{send_time,jdbcType=VARCHAR},
			    		#{send_msg,jdbcType=VARCHAR}
			    	)
		]]>
	</insert>
	
	<!-- 접속 채팅방 이전 메시지 get // 최근 100 개만 -->
	<select id="getpastMsg" resultMap="chatMsg" parameterType="java.util.HashMap">
		<![CDATA[
		SELECT memNum ,memId, msgDatetime, msgText 
		FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY TO_NUMBER(A.MSGNUM) DESC) AS rn, A.memNum ,B.memId, A.msgDatetime, A.msgText
			FROM MESSAGE A, MEMBER B
			WHERE A.MEMNUM=B.MEMNUM
		]]>
			<if test=" chatroomId != ''  and  chatroomId != null">
				<![CDATA[
					AND A.CHATROOMID = #{chatroomId}
				]]>
			</if>
		<![CDATA[
			ORDER BY rn desc
		)
		WHERE rn < 100
		]]>
	</select>
	
	<!-- 채팅방 이름 수정 -->
	<update id="updateChatroomName" parameterType="java.util.HashMap">
		<![CDATA[
			UPDATE MEMBERCHAT 
			SET CHATROOMNICKNAME = #{chatroomNickname}
			WHERE CHATROOMID = #{chatroomId}
			    AND MEMNUM = #{memNum}
		]]>
	</update>
	
	<!-- 채팅방 나가기 -->
	<delete id="deleteMemberChat" parameterType="java.util.HashMap">
		<![CDATA[
			DELETE FROM MEMBERCHAT 
			WHERE CHATROOMID = #{chatroomId}
			    AND MEMNUM = #{memNum}
		]]>
	</delete>
</mapper>	